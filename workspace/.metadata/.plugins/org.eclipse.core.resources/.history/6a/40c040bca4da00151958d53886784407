/*
 * Shooter.cpp
 *
 *  Created on: Feb 9, 2016
 *      Author: 1750800404
 */

#include "Shooter.h"

Shooter::Shooter(){

	raiseShoot = new CANTalon(7);
	raiseShoot->SetFeedbackDevice(CANTalon::CtreMagEncoder_Absolute);
	//Needs to be checked, documentation has relative and absolute with opposite descriptions

	shooterAngle = (raiseShoot->GetEncPosition()); // Use angle to create linear relation

	lShooter = new CANTalon(5);
	rShooter = new CANTalon (6);
	lBanner = new DigitalInput(1);
	rBanner = new DigitalInput(2);

	picker = new CANTalon(8);

	shootSol = new Solenoid(0, 1);

	ballSense = new DigitalInput(0);

	rpmTimerL = new Timer();
	rpmTimerR = new Timer();

	shooterRestLimit = 100;
	shooterTopLimit = 1000;

}

Shooter::~Shooter(){

	delete raiseShoot;
	delete lShooter;
	delete rShooter;
	delete lBanner;
	delete rBanner;

	delete picker;

	delete shootSol;

	delete ballSense;

	delete rpmTimerL;
	delete rpmTimerR;

}

bool Shooter::DetectBall(){

	bool ball;

	if(ballSense->Get()){
		ball = true;
	}

	else{
		ball = false;
	}

	return ball;

}

void Shooter::Pickup(float speed){

	if(raiseShoot->GetEncPosition() == shooterRestLimit && DetectBall() == false){
		picker->Set(speed);
		lShooter->Set(-(speed/2));
		rShooter->Set(-(speed/2));
	}

	else{
		picker->Set(0.0);
		lShooter->Set(0.0);
		rShooter->Set(0.0);
	}

	DetectBall();

}

void Shooter::PickupNoSense(float speed){
		picker->Set(speed);
		lShooter->Set(-(speed/2));
		rShooter->Set(-(speed/2));
}

void Shooter::Raise(float speed){

	if(raiseShoot->GetEncPosition() < shooterTopLimit){
		raiseShoot->Set(speed);
	}

	else{
		raiseShoot->Set(0.0);
	}

}

void Shooter::RaiseNoSense(float speed){
		raiseShoot->Set(speed);
}

void Shooter::Lower(float speed){

	if(raiseShoot->GetEncPosition() > shooterRestLimit){
		raiseShoot->Set(-speed);
	}

	else{
		raiseShoot->Set(0.0);
	}

}

void Shooter::LowerNoSense(float speed){
		raiseShoot->Set(-speed);
}

void Shooter::HighGoal(float speed, int encoVal){

	if(raiseShoot->GetEncPosition() < encoVal){
		raiseShoot->Set(speed);
	}

	else if (raiseShoot->GetEncPosition() > encoVal){
		raiseShoot->Set(-speed);
	}

}

void Shooter::LowGoal(float speed, int encoVal){

	if(raiseShoot->GetEncPosition() < encoVal){
		raiseShoot->Set(speed);
	}

	else if (raiseShoot->GetEncPosition() > encoVal){
		raiseShoot->Set(-speed);
	}

}

int Shooter::ReadRPM(DigitalInput *banner, Timer *Minute, int rpmReading){

	Minute->Reset();
	Minute->Start();

	for(int x = 0; x < 9; ){

		if(banner->Get()){
			x = x + 1;
		}

	}

	Minute->Stop();
	double seconds = Minute->Get();

	rpmReading = (3/seconds) * 60;

	return rpmReading;

}

void Shooter::Shoot(int leftRPM, int rightRPM){

	int lPow = 0.1;
	int rPow = 0.1;

	if(leftRPM > 5500 && rightRPM > 5500){
		leftRPM = 5500;
		rightRPM = 5500;
	}

	while(ReadRPM(lBanner, rpmTimerL, lRPMReading) < leftRPM){
		lShooter->Set(lPow);
		lPow += 0.05;
	}

	while(ReadRPM(rBanner, rpmTimerR, rRPMReading) < rightRPM){
		rShooter->Set(rPow);
		rPow += 0.05;
	}

	shootSol->Set(true);
	Wait(1.0);
	shootSol->Set(false);

	/*lShooter->Set(left);
	rShooter->Set(right);
	Wait(1.0);
	shootSol->Set(true);
	Wait(1.0);
	shootSol->Set(false);*/

}

void Shooter::ShootNoSense(float leftPow, float rightPow){

	lShooter->Set(leftPow);
	rShooter->Set(rightPow);
	Wait(0.5);
	shootSol->Set(true);
	Wait(1.0);
	shootSol->Set(false);

}
